<objdefs appVersion="1.0.12">
   <obj.normal id="OLED_Parser" uuid="d455c788-2a8a-4096-85d1-2e1302ed60e6">
      <sDescription>script with 2 inputs and 2 outputs, running in a separate thread, you must define &quot;void setup(void){}&quot; and &quot;void loop(void)&quot;</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>script.axh</helpPatch>
      <inlets>
         <bool32 name="dispNums_"/>
         <bool32 name="trig_"/>
         <charptr32 name="OLEDA0_"/>
         <charptr32 name="OLEDA1_"/>
         <charptr32 name="OLEDA2_"/>
         <charptr32 name="OLEDA3_"/>
         <frac32 name="in1_" description="in1"/>
         <frac32 name="in2_" description="in2"/>
         <charptr32 name="OLEDB0_"/>
         <charptr32 name="OLEDB1_"/>
         <charptr32 name="OLEDB2_"/>
         <charptr32 name="OLEDB3_"/>
         <frac32 name="in3_"/>
         <frac32 name="in4_"/>
         <charptr32 name="OLEDC0_"/>
         <charptr32 name="OLEDC1_"/>
         <charptr32 name="OLEDC2_"/>
         <charptr32 name="OLEDC3_"/>
         <frac32 name="in5_"/>
         <frac32 name="in6_"/>
         <charptr32 name="OLEDD0_"/>
         <charptr32 name="OLEDD1_"/>
         <charptr32 name="OLEDD2_"/>
         <charptr32 name="OLEDD3_"/>
         <frac32 name="in7_"/>
         <frac32 name="in8_"/>
      </inlets>
      <outlets>
         <frac32 name="out1_" description="out1"/>
         <frac32 name="out2_" description="out2"/>
         <bool32 name="bOut_"/>
         <int32 name="o1_"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <text name="script"/>
      </attribs>
      <code.declaration><![CDATA[char OLEDTxt[4][4][16]; // Device, row, character
int32_t in[8];
int32_t bOut;
int32_t out1,out2,o1;
attr_script
int32_t bTrig, bDispNums;
msg_t ThreadX2(){
  setup();
  while(!chThdShouldTerminate()){
     loop();
     chThdSleepMilliseconds(1);
  }
  chThdExit((msg_t)0);
}
static msg_t ThreadX(void *arg) {
((attr_parent *)arg)->ThreadX2();
}
WORKING_AREA(waThreadX, 1024);
Thread *Thd;]]></code.declaration>
      <code.init><![CDATA[in[0]=0;
in[1]=0;
in[2]=0;
in[3]=0;
in[4]=0;
in[5]=0;
in[6]=0;
in[7]=0;
o1=0;

bOut  = 0;
bDispNums = 0;
bTrig = 0;
  Thd = chThdCreateStatic(waThreadX, sizeof(waThreadX),
                    NORMALPRIO, ThreadX, (void *)this);]]></code.init>
      <code.dispose><![CDATA[chThdTerminate(Thd);
chThdWait(Thd);]]></code.dispose>
      <code.krate><![CDATA[outlet_out1__  = this->out1;
outlet_out2__  = this->out2;
outlet_bOut__  = this->bOut;
outlet_o1__    = this->o1;

this->bDispNums = inlet_dispNums__;
this->bTrig    = inlet_trig__;

this->in[0]    = inlet_in1__;
this->in[1]    = inlet_in2__;
this->in[2]    = inlet_in3__;
this->in[3]    = inlet_in4__;
this->in[4]    = inlet_in5__;
this->in[5]    = inlet_in6__;
this->in[6]    = inlet_in7__;
this->in[7]    = inlet_in8__;


strcpy(OLEDTxt[0][0], inlet_OLEDA0__);
strcpy(OLEDTxt[0][1], inlet_OLEDA1__);
strcpy(OLEDTxt[0][2], inlet_OLEDA2__);
strcpy(OLEDTxt[0][3], inlet_OLEDA3__);

strcpy(OLEDTxt[1][0], inlet_OLEDB0__);
strcpy(OLEDTxt[1][1], inlet_OLEDB1__);
strcpy(OLEDTxt[1][2], inlet_OLEDB2__);
strcpy(OLEDTxt[1][3], inlet_OLEDB3__);

strcpy(OLEDTxt[2][0], inlet_OLEDC0__);
strcpy(OLEDTxt[2][1], inlet_OLEDC1__);
strcpy(OLEDTxt[2][2], inlet_OLEDC2__);
strcpy(OLEDTxt[2][3], inlet_OLEDC3__);

strcpy(OLEDTxt[3][0], inlet_OLEDD0__);
strcpy(OLEDTxt[3][1], inlet_OLEDD1__);
strcpy(OLEDTxt[3][2], inlet_OLEDD2__);
strcpy(OLEDTxt[3][3], inlet_OLEDD3__);]]></code.krate>
   </obj.normal>
</objdefs>