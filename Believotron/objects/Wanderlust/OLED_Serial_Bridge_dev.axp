<patch-1.0 appVersion="1.0.12">
   <comment type="patch/comment" x="14" y="14" text="demonstrates the use of hardware serial I/O. Connect PA2 to PA3 to create a loopback test."/>
   <obj type="gpio/serial/config" uuid="8ec617bbe7b552a58656442e87513d8b4c69833a" name="serial.begin_1" x="14" y="42">
      <params/>
      <attribs>
         <combo attributeName="baudrate" selection="115200"/>
      </attribs>
   </obj>
   <obj type="OLED/OLED_Parser" uuid="d455c788-2a8a-4096-85d1-2e1302ed60e6" name="OLED_Parser_1" x="714" y="42">
      <params/>
      <attribs>
         <text attributeName="script">
            <sText><![CDATA[// demo serial transmission and reception using SD2 (USART2)

#define UARTWriteByte( a ) (sdPut(&SD2,a))

void writeLine( char * chBuff, uint8_t iLength)
{
	UARTWriteByte('{');
	UARTWriteByte('W');
	UARTWriteByte('L');
	UARTWriteByte(',');
	UARTWriteByte('3');
	UARTWriteByte(',');
	UARTWriteByte('3');
	UARTWriteByte(',');
	UARTWriteByte('1');
	UARTWriteByte(',');
	//UARTWriteByte('1');
	//UARTWriteByte('6');
	//UARTWriteByte(',');
	UARTWriteByte('"');
	
	
	for (int i=0; i<iLength; i++)
	{		
		UARTWriteByte( chBuff[i] );
		if (chBuff[i] == '\0') break;
	}

	UARTWriteByte('"');
	UARTWriteByte('}');	
	
}

void writeScreen(){
	UARTWriteByte('{');
	UARTWriteByte('W');
	UARTWriteByte('S');
}


union float2bytes { float f; char b[sizeof(float)]; };

void writeFloat(float fVal, int iDevice, int iRow, int iOffset, int iWidth)
{
	char cBuff;
	
	UARTWriteByte('{');
	UARTWriteByte('W');
	UARTWriteByte('F');
	UARTWriteByte(',');
	//UARTWriteByte('1');
	//itoa(iDevice,  cBuff, 10);
	//UARTWriteByte( cBuff[0] );
	cBuff = '0' + iDevice;
	UARTWriteByte( cBuff );
	UARTWriteByte(',');
	//UARTWriteByte('0');
	cBuff = '0' + iRow;
	UARTWriteByte( cBuff );
	UARTWriteByte(',');
	UARTWriteByte('0');
	UARTWriteByte(',');
	UARTWriteByte('9');
	UARTWriteByte(',');
	//UARTWriteByte(0);
	//UARTWriteByte(0);
	//UARTWriteByte(0);
	//UARTWriteByte(1);

	float2bytes f2b;
	f2b.f = fVal;

	UARTWriteByte( f2b.b[0] );
	UARTWriteByte( f2b.b[1] );
	UARTWriteByte( f2b.b[2] );
	UARTWriteByte( f2b.b[3] );
	UARTWriteByte('}');	

	//chThdSleepMilliseconds(1);
}


void writeInt(int32_t i32Val, int iDevice, int iRow, int iOffset, int iWidth)
{
	UARTWriteByte('{');
	UARTWriteByte('W');
	UARTWriteByte('I');
	UARTWriteByte(',');
	UARTWriteByte('1');
	UARTWriteByte(',');
	UARTWriteByte('0');
	UARTWriteByte(',');
	UARTWriteByte('0');
	UARTWriteByte(',');
	UARTWriteByte('9');
	UARTWriteByte(',');
	//UARTWriteByte(0);
	//UARTWriteByte(0);
	//UARTWriteByte(0);
	//UARTWriteByte(1);

	UARTWriteByte( (char) ( (i32Val >> 24) & 0xFF ) );
	UARTWriteByte( (char) ( (i32Val >> 16) & 0xFF ) );
	UARTWriteByte( (char) ( (i32Val >>  8) & 0xFF ) );
	UARTWriteByte( (char) ( (i32Val      ) & 0xFF ) );		
	UARTWriteByte('}');	
}

void writeClear()
{
	UARTWriteByte('{');
	UARTWriteByte('W');
	UARTWriteByte('C');	
}


void setup(void) {

	UARTWriteByte( 'A' );
	UARTWriteByte( 'B' );
	UARTWriteByte( 'C' );
	UARTWriteByte( 'D' );

	writeClear();

	//writeLine("Proof of UART", 13);
	//writeInt(in1, 2, 1, 3, 8);
	
	
} 


float ConvertPolarToFloat(int32_t i32Val)
{
	return (i32Val * 0.000000476835);
}


void loop(void) {
	uint8_t foo;
	static uint8_t bLastVal=0;
	static int32_t inPrev[8] = {0,0,0,0,0,0,0,0};

	//if (in2 != in2Prev)	{
	float fFoo;
	//fFoo = ConvertPolarToFloat(in2);
	//writeInt(in1, 2, 1, 3, 8);				
	//writeFloat( fFoo     , 0, 0, 3, 8);

	//writeInt(in1, 0, 2, 3, 8);	
	//writeFloat( fFoo     , 0, 0, 3, 8);
	bOut = 1;

	int iDelay = 1;	
	if (inPrev[0] == in[0]) { writeFloat( ConvertPolarToFloat(in[0]) , 0, 0, 3, 8); chThdSleepMilliseconds(iDelay); }
	if (inPrev[1] == in[1]) { writeFloat( ConvertPolarToFloat(in[1]) , 1, 0, 3, 8); chThdSleepMilliseconds(iDelay); }
	if (inPrev[2] == in[2]) { writeFloat( ConvertPolarToFloat(in[2]) , 2, 0, 3, 8); chThdSleepMilliseconds(iDelay); }
	if (inPrev[3] == in[3]) { writeFloat( ConvertPolarToFloat(in[3]) , 3, 0, 3, 8); chThdSleepMilliseconds(iDelay); }

	if (inPrev[4] == in[4]) { writeFloat( ConvertPolarToFloat(in[4]) , 0, 1, 3, 8); chThdSleepMilliseconds(iDelay); }
	if (inPrev[5] == in[5]) { writeFloat( ConvertPolarToFloat(in[5]) , 1, 1, 3, 8); chThdSleepMilliseconds(iDelay); }
	if (inPrev[6] == in[6]) { writeFloat( ConvertPolarToFloat(in[6]) , 2, 1, 3, 8); chThdSleepMilliseconds(iDelay); }
	if (inPrev[7] == in[7]) { writeFloat( ConvertPolarToFloat(in[7]) , 3, 1, 3, 8); chThdSleepMilliseconds(iDelay); }
	

	
	//writeFloat( ConvertPolarToFloat(in[0]) , 0, 0, 3, 8);
	
	//writeFloat( ConvertPolarToFloat(in[1]) , 1, 0, 3, 8); chThdSleepMilliseconds(iDelay);
	//writeFloat( ConvertPolarToFloat(in[2]) , 2, 0, 3, 8); chThdSleepMilliseconds(iDelay);	
	//writeFloat( ConvertPolarToFloat(in[3]) , 3, 0, 3, 8); chThdSleepMilliseconds(iDelay);

	//writeFloat( ConvertPolarToFloat(in[4]) , 0, 1, 3, 8); chThdSleepMilliseconds(iDelay);
	//writeFloat( ConvertPolarToFloat(in[5]) , 1, 1, 3, 8); chThdSleepMilliseconds(iDelay);
	//writeFloat( ConvertPolarToFloat(in[6]) , 2, 1, 3, 8); chThdSleepMilliseconds(iDelay);
	//writeFloat( ConvertPolarToFloat(in[7]) , 3, 1, 3, 8); chThdSleepMilliseconds(iDelay);
	
	//writeFloat( ConvertPolarToFloat(in[1]) , 1, 0, 3, 8);
	//writeFloat( ConvertPolarToFloat(in[2]) , 2, 0, 3, 8);
	//writeFloat( ConvertPolarToFloat(in[3]) , 3, 0, 3, 8);
	//writeFloat( ConvertPolarToFloat(in[0]) , 0, 0, 3, 8);
	//writeFloat( ConvertPolarToFloat(in[0]) , 0, 0, 3, 8);
	bOut = 0;

	//writeScreen();
	//}

	//in2Prev = in2;

	for (int i=0; i< 8; i++)	{
		inPrev[i] = in[i];	
	}
	

	//if (bLastVal == 0 && bTrig)
	//{	
	//	float fFoo;
	//	fFoo = ConvertPolarToFloat(in2);
	//	//writeInt(in1, 2, 1, 3, 8);		
	//	writeFloat( ConvertPolarToFloat(in2) , 2, 1, 3, 8);		
	//}

	bLastVal = bTrig;
	
	
	// send a single byte, value from in1
	//sdPut(&SD2, 'b'); 
	//sdPut(&SD2, in1>>21); 
	//UARTWriteByte( 'A' );
	//UARTWriteByte( 'B' );

	//char cBuff[16] = "Them apples";

	//writeLine(cBuff, strlen(cBuff) );

	// read all pending bytes, value to out1
	while(!sdGetWouldBlock(&SD2)){
		out1 = sdGet(&SD2)<<21;
	}
	//chThdSleepMilliseconds(100);
	chThdSleepMilliseconds(1);
}

]]></sText>
         </text>
      </attribs>
   </obj>
   <obj type="ctrl/dial b" uuid="862e7d7f29093cb1ce4aed72244d118ad4d46692" name="dial_1" x="378" y="56">
      <params>
         <frac32.s.map name="value" value="35.499999713897616"/>
      </params>
      <attribs/>
   </obj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_2" x="574" y="56">
      <params/>
      <attribs/>
   </obj>
   <comment type="patch/comment" x="14" y="112" text="transmission/reception of serial data is done in a script2 object"/>
   <obj type="gpio/out/digital" uuid="320eed040f6c55bb24c56416596ac2e67d0c82bc" name="digital_1" x="910" y="126">
      <params/>
      <attribs>
         <combo attributeName="pad" selection="PB7"/>
         <combo attributeName="mode" selection="Push pull"/>
      </attribs>
   </obj>
   <obj type="ctrl/dial p" uuid="cc5d2846c3d50e425f450c4b9851371b54f4d674" name="c_1" x="14" y="140">
      <params>
         <frac32.u.map name="value" value="18.5"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/+1" uuid="6b958b82fafa8d61216203d28f9f0e4cd27fa2a6" name="+1_1" x="490" y="140">
      <params/>
      <attribs/>
   </obj>
   <obj type="ctrl/button" uuid="ef3d13774349df85aa9bfecf30dbc91ab8488b3f" name="button_1" x="98" y="168">
      <params>
         <bool32.mom name="b" value="0"/>
      </params>
      <attribs/>
   </obj>
   <obj type="math/+1" uuid="6b958b82fafa8d61216203d28f9f0e4cd27fa2a6" name="+1_2" x="490" y="196">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+1" uuid="6b958b82fafa8d61216203d28f9f0e4cd27fa2a6" name="+1_3" x="490" y="252">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+1" uuid="6b958b82fafa8d61216203d28f9f0e4cd27fa2a6" name="+1_4" x="490" y="308">
      <params/>
      <attribs/>
   </obj>
   <obj type="disp/dial p" uuid="44fd18b562e434b3230441681132dbeabb15cdc5" name="displayU_1" x="868" y="322">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+1" uuid="6b958b82fafa8d61216203d28f9f0e4cd27fa2a6" name="+1_5" x="490" y="364">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+1" uuid="6b958b82fafa8d61216203d28f9f0e4cd27fa2a6" name="+1_6" x="490" y="420">
      <params/>
      <attribs/>
   </obj>
   <obj type="math/+1" uuid="6b958b82fafa8d61216203d28f9f0e4cd27fa2a6" name="+1_7" x="490" y="476">
      <params/>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="button_1" outlet="o"/>
         <dest obj="OLED_Parser_1" inlet="trig_"/>
      </net>
      <net>
         <source obj="+1_1" outlet="result"/>
         <dest obj="OLED_Parser_1" inlet="in2_"/>
         <dest obj="+1_2" inlet="a"/>
      </net>
      <net>
         <source obj="+1_2" outlet="result"/>
         <dest obj="OLED_Parser_1" inlet="in3_"/>
         <dest obj="+1_3" inlet="a"/>
      </net>
      <net>
         <source obj="+1_5" outlet="result"/>
         <dest obj="OLED_Parser_1" inlet="in6_"/>
         <dest obj="+1_6" inlet="a"/>
      </net>
      <net>
         <source obj="+1_3" outlet="result"/>
         <dest obj="OLED_Parser_1" inlet="in4_"/>
         <dest obj="+1_4" inlet="a"/>
      </net>
      <net>
         <source obj="+1_4" outlet="result"/>
         <dest obj="OLED_Parser_1" inlet="in5_"/>
         <dest obj="+1_5" inlet="a"/>
      </net>
      <net>
         <source obj="+1_6" outlet="result"/>
         <dest obj="OLED_Parser_1" inlet="in7_"/>
         <dest obj="+1_7" inlet="a"/>
      </net>
      <net>
         <source obj="+1_7" outlet="result"/>
         <dest obj="OLED_Parser_1" inlet="in8_"/>
      </net>
      <net>
         <source obj="OLED_Parser_1" outlet="bOut_"/>
         <dest obj="digital_1" inlet="in"/>
      </net>
      <net>
         <source obj="dial_1" outlet="out"/>
         <dest obj="+1_1" inlet="a"/>
         <dest obj="OLED_Parser_1" inlet="in1_"/>
         <dest obj="dial_2" inlet="in"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>10</x>
      <y>483</y>
      <width>1150</width>
      <height>708</height>
   </windowPos>
</patch-1.0>