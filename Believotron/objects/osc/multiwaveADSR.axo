<objdefs appVersion="1.0.12">
   <obj.normal id="multiwaveADSR" uuid="60014d06-2b04-4943-93e6-f2c1d6b4cddb">
      <sDescription>multi waveform oscilator: sine, triangle, saw, square
each waveform (except sine) is able to change its shape (e.g. square = pwm).

Forked from Beat Rossmy.
Removed &gt;&gt;4 of inlet_wave</sDescription>
      <author>Daniel Lindmark</author>
      <license>BSD</license>
      <inlets>
         <frac32.bipolar name="pitch"/>
         <frac32buffer name="freq" description="phase increment"/>
         <bool32.rising name="reset" description="reset phase"/>
         <frac32.bipolar name="shape" description="wave shaper"/>
         <int32.positive name="wave" description="wave select"/>
         <frac32.bipolar name="amount" description="Shape amount"/>
         <frac32.positive name="a" description="Attack"/>
         <frac32.positive name="d" description="Decay"/>
         <frac32.positive name="s" description="Sustain"/>
         <frac32.positive name="r" description="Release"/>
         <frac32 name="v" description="Volume"/>
         <bool32.risingfalling name="gate" description="Gate"/>
      </inlets>
      <outlets>
         <frac32buffer name="o"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.declaration><![CDATA[// Glue
int32_t osc_out;

// Osc stuff
static uint8_t const sin = 0;
static uint8_t const tri = 1;
static uint8_t const saw = 2;
static uint8_t const pwm = 3;

uint32_t phase;
int32_t phasor;
int32_t phaseCounter;
uint32_t r;
int32_t a;
int32_t b;


// ADSR Stuff
int8_t stage;
int ntrig;
int32_t envelope_out;
int32_t env; // envelope


// Gain stuff
int32_t prev, prev2;
int32_t step, step2;
int32_t temp;]]></code.declaration>
      <code.init><![CDATA[// Glue
osc_out = 0;

// Osc init
phase = 0;
phasor = 0;
phaseCounter = 0;

r = 1;
a = 0;
b = 0;

// Env init
stage = 0;
ntrig = 0;
envelope_out = 0;
env = 0;]]></code.init>
      <code.krate><![CDATA[// Osc stuff
uint32_t freq;
#define UNI2BIPOLAR(a) ((a -(1<<26) ) << 1)
MTOFEXTENDED(0xFA000000 + inlet_pitch,freq);

int32_t shape;
shape = __USAT( (___SMMUL(UNI2BIPOLAR(inlet_amount),UNI2BIPOLAR(inlet_shape))<<1), 27);

int32_t waveform;
waveform = ((inlet_wave))%4;




// ADSR Stuff
if ( (inlet_gate>0) && !ntrig) { stage = 1; ntrig = 1;}
if (!(inlet_gate>0) &&  ntrig) { stage = 0; ntrig = 0;}
#define UNI2BIPOLAR(a) ((a -(1<<26) ) << 1)


if (stage == 0) // Release!
{
   int32_t r1;
   int32_t r2;
   //MTOF(- param_r - inlet_r, r1);
   MTOF(UNI2BIPOLAR(inlet_r)<<1, r1);
   r1 = 0x7FFFFFFF - (r1 >> 2);
   envelope_out = ___SMMUL(envelope_out,r1)<<1;
} 
else if (stage == 1) // Attack!
{
   int32_t a;
   //MTOF(- -64 -inlet_a,a);
   //MTOF(- param_a - inlet_a,a);
   MTOF((UNI2BIPOLAR(inlet_a))<<1,a);
   a = a >> 2;
   envelope_out = envelope_out + a;
   if (envelope_out<0)               // If the attack has finished (overflow)
   {
      envelope_out =0x7FFFFFFF;
      stage = 2;
   }
} 
else if (stage == 2) // Decay + Sustain :/
{
   int32_t s = __USAT(inlet_s, 27);


   int32_t d;
   MTOF(UNI2BIPOLAR(inlet_d)<<1, d);
   d = 0x7FFFFFFF - (d >> 2);
   envelope_out = (s<<4) + (___SMMUL(envelope_out - (s<<4),d)<<1);
}


env = envelope_out>>4;

step = (env - prev)>>4;
int32_t i = prev;
prev = env;

step2 = (inlet_v - prev2)>>4;
int32_t i2 = prev2;
prev2 = inlet_v;]]></code.krate>
      <code.srate><![CDATA[/* reset phase if retriggered */
if (inlet_reset && r) {
	phase = 0;
	phaseCounter = 0;
	r = 0;
} else { 
	if (!inlet_reset) r = 1;
	phase += (freq>>0) + inlet_freq;
	/* if new phasor value is smaller then last one -> increment phaseCounter */
	a = phase>>5;
	/* first or second phase cycle */
	if (a < phasor) {
		phaseCounter++;
		if (phaseCounter == 2) phaseCounter = 0;
	}
	/* set new phasor value */
	phasor = a;
}

/* calculate waveforms based on phasor value */
switch (waveform) {
	case sin:
		/* phasor to sine */
		SINE2TINTERP(phasor<<5,a) /* calculate sine wave via function */
		osc_out = (a>>4);
		break;

	case tri:
		/* phasor to triangle */
		b = (phasor>0x07FFFFFF/4)? phasor-0x07FFFFFF/4:phasor+0x07FFFFFF/4*3; /* phase shift to correct wave startpoint*/
		a = (b-(1<<26))<<1; /* phasor to sawUp (bipolar) -> -a = sawDown (bipolar) */
		a = (a>0)? a:-a; /* merge sawUp and sawDown to triangle -> unipolar */
		a = (a-(1<<26))<<1; /* unipolar to bipolar */
		b = 0x07FFFFFF-(shape/10*8);
		a = (a>b || a<-b)? -a+((a>0)?2:-2)*b:a; /* param_shape threshold for wavefolding */
		osc_out = a;
		break;

	case saw:
		/* phasor to saw */
		b = (phasor>0x07FFFFFF/2)? phasor-0x07FFFFFF/2:phasor+0x07FFFFFF/2; /* phase shift to correct wave startpoint*/
		a = (b-(1<<26))<<1; /* phasor to sawUp (bipolar) */
		osc_out = (phaseCounter==1 && (phasor>0x07FFFFFF/2-shape/2 && phasor<0x07FFFFFF/2+shape/2))? -a:a;
		break;

	case pwm:
		/* phasor to pulse width */
		osc_out = (phasor>=0x07FFFFFF/2+shape/2)? -0x08000000:0x07FFFFFF; /* pulse width depending on shape value*/
		break;
}

/*
temp =  ___SMMUL(osc_out,i)<<5;
i += step;

outlet_o =  ___SMMUL(temp,i2)<<5;
i2 += step2;
*/

outlet_o =  ___SMMUL(osc_out,i)<<5;
i += step;]]></code.srate>
   </obj.normal>
</objdefs>