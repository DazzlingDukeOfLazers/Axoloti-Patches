<objdefs appVersion="1.0.10">
   <obj.normal id="BTWavLoadFn" uuid="3529e74f-e1ca-4e5f-8603-086e8c2dca14">
      <sDescription>load 16bit pwm wavetable raw (no header) of single cycle waves.
use with wave/wavetable play
note: you can just load 1 wave and use as wave oscillator

filename is supplied as inlet, trig to load , check outlet to see if loaded successfully</sDescription>
      <author>Mark Harris</author>
      <license>GPL</license>
      <helpPatch>wavetable.axh</helpPatch>
      <inlets>
         <charptr32 name="filename" description="wavetable filename"/>
         <bool32.rising name="trig" description="trig to load"/>
      </inlets>
      <outlets>
         <bool32 name="loaded" description="wavetable loaded successfully"/>
      </outlets>
      <displays/>
      <params/>
      <attribs>
         <combo name="waves" description="number of waves">
            <MenuEntries>
               <string>1</string>
               <string>2</string>
               <string>4</string>
               <string>8</string>
               <string>16</string>
               <string>32</string>
               <string>64</string>
               <string>128</string>
               <string>256</string>
               <string>512</string>
            </MenuEntries>
            <CEntries>
               <string>0</string>
               <string>1</string>
               <string>2</string>
               <string>3</string>
               <string>4</string>
               <string>5</string>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
            </CEntries>
         </combo>
         <combo name="size" description="size of each wave">
            <MenuEntries>
               <string>64</string>
               <string>128</string>
               <string>256</string>
               <string>512</string>
               <string>1024</string>
               <string>2048</string>
               <string>4096</string>
               <string>8192</string>
            </MenuEntries>
            <CEntries>
               <string>6</string>
               <string>7</string>
               <string>8</string>
               <string>9</string>
               <string>10</string>
               <string>11</string>
               <string>12</string>
               <string>13</string>
            </CEntries>
         </combo>
      </attribs>
      <depends>
         <depend>fatfs</depend>
      </depends>
      <code.declaration><![CDATA[static const uint32_t WAVESPOW = (attr_waves);
static const uint32_t SIZEPOW = (attr_size);
static const uint32_t LENGTHPOW = (attr_waves + attr_size);
static const uint32_t LENGTH = (1 << LENGTHPOW);
static const uint32_t LENGTHMASK = ((1 << LENGTHPOW )-1);
static const uint32_t BITS = 16;
static const uint32_t GAIN = 12;
int16_t *array;
int ntrig;
int loaded =0;]]></code.declaration>
      <code.init><![CDATA[static int16_t _array[attr_poly][LENGTH] __attribute__ ((section (".sdram")));
loaded = 0;
ntrig = 0;
array = &_array[parent->polyIndex][0];]]></code.init>
      <code.krate><![CDATA[if ((inlet_trig>0) && !ntrig) {
     ntrig=1;
	int i;
	for(i=0;i<LENGTH;i++) array[i]=0;

	FIL FileObject;
	FRESULT err;
	UINT bytes_read;
	err = f_open(&FileObject, inlet_filename, FA_READ | FA_OPEN_EXISTING);
	if (err != FR_OK) {report_fatfs_error(err,inlet_filename); return;}
	int rem_sz = sizeof(array)*LENGTH;
	int offset = 0;
	while (rem_sz>0) {
	  if (rem_sz>sizeof(fbuff)) {
	    err = f_read(&FileObject, fbuff, sizeof(fbuff),&bytes_read);
	    if (bytes_read == 0) break;
	    memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
	    rem_sz -= bytes_read;
	    offset += bytes_read;
	  } else {
	    err = f_read(&FileObject, fbuff, rem_sz, &bytes_read);
	    memcpy((char *)(&array[0]) + offset,(char *)fbuff,bytes_read);
	    rem_sz = 0;
	  }
	}
	loaded = (err == FR_OK);
	if (err != FR_OK) {LogTextMessage("Read failed\n"); return;}
	err = f_close(&FileObject);
	if (err != FR_OK) {LogTextMessage("Close failed\n"); return;}
} else if (!(inlet_trig>0)) ntrig=0;

outlet_loaded = loaded;]]></code.krate>
   </obj.normal>
</objdefs>